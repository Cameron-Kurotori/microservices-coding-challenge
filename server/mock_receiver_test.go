// generation command (from root): 
// (grep "generation command" server/mock_receiver_test.go && mockgen --package server --source server/server.go) > server/tmp_mock_receiver_test.go && mv server/tmp_mock_receiver_test.go server/mock_receiver_test.go
// Code generated by MockGen. DO NOT EDIT.
// Source: server/server.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	distqueue "github.com/Cameron-Kurotori/microservices-coding-challenge/proto/distqueue"
	gomock "github.com/golang/mock/gomock"
)

// MockServerQueueItemSender is a mock of ServerQueueItemSender interface.
type MockServerQueueItemSender struct {
	ctrl     *gomock.Controller
	recorder *MockServerQueueItemSenderMockRecorder
}

// MockServerQueueItemSenderMockRecorder is the mock recorder for MockServerQueueItemSender.
type MockServerQueueItemSenderMockRecorder struct {
	mock *MockServerQueueItemSender
}

// NewMockServerQueueItemSender creates a new mock instance.
func NewMockServerQueueItemSender(ctrl *gomock.Controller) *MockServerQueueItemSender {
	mock := &MockServerQueueItemSender{ctrl: ctrl}
	mock.recorder = &MockServerQueueItemSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerQueueItemSender) EXPECT() *MockServerQueueItemSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockServerQueueItemSender) Send(arg0 *distqueue.ServerQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockServerQueueItemSenderMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockServerQueueItemSender)(nil).Send), arg0)
}

// MockQueueReceiver is a mock of QueueReceiver interface.
type MockQueueReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockQueueReceiverMockRecorder
}

// MockQueueReceiverMockRecorder is the mock recorder for MockQueueReceiver.
type MockQueueReceiverMockRecorder struct {
	mock *MockQueueReceiver
}

// NewMockQueueReceiver creates a new mock instance.
func NewMockQueueReceiver(ctrl *gomock.Controller) *MockQueueReceiver {
	mock := &MockQueueReceiver{ctrl: ctrl}
	mock.recorder = &MockQueueReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueReceiver) EXPECT() *MockQueueReceiverMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockQueueReceiver) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockQueueReceiverMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockQueueReceiver)(nil).Context))
}

// Recv mocks base method.
func (m *MockQueueReceiver) Recv() (*distqueue.QueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*distqueue.QueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockQueueReceiverMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockQueueReceiver)(nil).Recv))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Stats mocks base method.
func (m *MockServer) Stats() stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(stats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockServerMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockServer)(nil).Stats))
}

// Sync mocks base method.
func (m *MockServer) Sync(arg0 distqueue.DistributedQueueService_SyncServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockServerMockRecorder) Sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockServer)(nil).Sync), arg0)
}

// mustEmbedUnimplementedDistributedQueueServiceServer mocks base method.
func (m *MockServer) mustEmbedUnimplementedDistributedQueueServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedQueueServiceServer")
}

// mustEmbedUnimplementedDistributedQueueServiceServer indicates an expected call of mustEmbedUnimplementedDistributedQueueServiceServer.
func (mr *MockServerMockRecorder) mustEmbedUnimplementedDistributedQueueServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedQueueServiceServer", reflect.TypeOf((*MockServer)(nil).mustEmbedUnimplementedDistributedQueueServiceServer))
}
