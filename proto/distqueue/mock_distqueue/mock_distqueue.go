// Code generated by MockGen. DO NOT EDIT.
// Source: proto/distqueue/distqueue_grpc.pb.go

// Package mock_distqueue is a generated GoMock package.
package mock_distqueue

import (
	context "context"
	reflect "reflect"

	distqueue "github.com/Cameron-Kurotori/microservices-coding-challenge/proto/distqueue"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDistributedQueueServiceClient is a mock of DistributedQueueServiceClient interface.
type MockDistributedQueueServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueServiceClientMockRecorder
}

// MockDistributedQueueServiceClientMockRecorder is the mock recorder for MockDistributedQueueServiceClient.
type MockDistributedQueueServiceClientMockRecorder struct {
	mock *MockDistributedQueueServiceClient
}

// NewMockDistributedQueueServiceClient creates a new mock instance.
func NewMockDistributedQueueServiceClient(ctrl *gomock.Controller) *MockDistributedQueueServiceClient {
	mock := &MockDistributedQueueServiceClient{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueServiceClient) EXPECT() *MockDistributedQueueServiceClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDistributedQueueServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (distqueue.DistributedQueueService_ConnectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(distqueue.DistributedQueueService_ConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockDistributedQueueServiceClientMockRecorder) Connect(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDistributedQueueServiceClient)(nil).Connect), varargs...)
}

// GetRange mocks base method.
func (m *MockDistributedQueueServiceClient) GetRange(ctx context.Context, in *distqueue.GetRangeRequest, opts ...grpc.CallOption) (distqueue.DistributedQueueService_GetRangeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRange", varargs...)
	ret0, _ := ret[0].(distqueue.DistributedQueueService_GetRangeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRange indicates an expected call of GetRange.
func (mr *MockDistributedQueueServiceClientMockRecorder) GetRange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockDistributedQueueServiceClient)(nil).GetRange), varargs...)
}

// MockDistributedQueueService_ConnectClient is a mock of DistributedQueueService_ConnectClient interface.
type MockDistributedQueueService_ConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueService_ConnectClientMockRecorder
}

// MockDistributedQueueService_ConnectClientMockRecorder is the mock recorder for MockDistributedQueueService_ConnectClient.
type MockDistributedQueueService_ConnectClientMockRecorder struct {
	mock *MockDistributedQueueService_ConnectClient
}

// NewMockDistributedQueueService_ConnectClient creates a new mock instance.
func NewMockDistributedQueueService_ConnectClient(ctrl *gomock.Controller) *MockDistributedQueueService_ConnectClient {
	mock := &MockDistributedQueueService_ConnectClient{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueService_ConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueService_ConnectClient) EXPECT() *MockDistributedQueueService_ConnectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDistributedQueueService_ConnectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDistributedQueueService_ConnectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDistributedQueueService_ConnectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDistributedQueueService_ConnectClient) Recv() (*distqueue.ServerQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*distqueue.ServerQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDistributedQueueService_ConnectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDistributedQueueService_ConnectClient) Send(arg0 *distqueue.QueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDistributedQueueService_ConnectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDistributedQueueService_ConnectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDistributedQueueService_ConnectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDistributedQueueService_ConnectClient)(nil).Trailer))
}

// MockDistributedQueueService_GetRangeClient is a mock of DistributedQueueService_GetRangeClient interface.
type MockDistributedQueueService_GetRangeClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueService_GetRangeClientMockRecorder
}

// MockDistributedQueueService_GetRangeClientMockRecorder is the mock recorder for MockDistributedQueueService_GetRangeClient.
type MockDistributedQueueService_GetRangeClientMockRecorder struct {
	mock *MockDistributedQueueService_GetRangeClient
}

// NewMockDistributedQueueService_GetRangeClient creates a new mock instance.
func NewMockDistributedQueueService_GetRangeClient(ctrl *gomock.Controller) *MockDistributedQueueService_GetRangeClient {
	mock := &MockDistributedQueueService_GetRangeClient{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueService_GetRangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueService_GetRangeClient) EXPECT() *MockDistributedQueueService_GetRangeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDistributedQueueService_GetRangeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDistributedQueueService_GetRangeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDistributedQueueService_GetRangeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDistributedQueueService_GetRangeClient) Recv() (*distqueue.ServerQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*distqueue.ServerQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDistributedQueueService_GetRangeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDistributedQueueService_GetRangeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDistributedQueueService_GetRangeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDistributedQueueService_GetRangeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDistributedQueueService_GetRangeClient)(nil).Trailer))
}

// MockDistributedQueueServiceServer is a mock of DistributedQueueServiceServer interface.
type MockDistributedQueueServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueServiceServerMockRecorder
}

// MockDistributedQueueServiceServerMockRecorder is the mock recorder for MockDistributedQueueServiceServer.
type MockDistributedQueueServiceServerMockRecorder struct {
	mock *MockDistributedQueueServiceServer
}

// NewMockDistributedQueueServiceServer creates a new mock instance.
func NewMockDistributedQueueServiceServer(ctrl *gomock.Controller) *MockDistributedQueueServiceServer {
	mock := &MockDistributedQueueServiceServer{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueServiceServer) EXPECT() *MockDistributedQueueServiceServerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDistributedQueueServiceServer) Connect(arg0 distqueue.DistributedQueueService_ConnectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDistributedQueueServiceServerMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDistributedQueueServiceServer)(nil).Connect), arg0)
}

// GetRange mocks base method.
func (m *MockDistributedQueueServiceServer) GetRange(arg0 *distqueue.GetRangeRequest, arg1 distqueue.DistributedQueueService_GetRangeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRange indicates an expected call of GetRange.
func (mr *MockDistributedQueueServiceServerMockRecorder) GetRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockDistributedQueueServiceServer)(nil).GetRange), arg0, arg1)
}

// mustEmbedUnimplementedDistributedQueueServiceServer mocks base method.
func (m *MockDistributedQueueServiceServer) mustEmbedUnimplementedDistributedQueueServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedQueueServiceServer")
}

// mustEmbedUnimplementedDistributedQueueServiceServer indicates an expected call of mustEmbedUnimplementedDistributedQueueServiceServer.
func (mr *MockDistributedQueueServiceServerMockRecorder) mustEmbedUnimplementedDistributedQueueServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedQueueServiceServer", reflect.TypeOf((*MockDistributedQueueServiceServer)(nil).mustEmbedUnimplementedDistributedQueueServiceServer))
}

// MockUnsafeDistributedQueueServiceServer is a mock of UnsafeDistributedQueueServiceServer interface.
type MockUnsafeDistributedQueueServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDistributedQueueServiceServerMockRecorder
}

// MockUnsafeDistributedQueueServiceServerMockRecorder is the mock recorder for MockUnsafeDistributedQueueServiceServer.
type MockUnsafeDistributedQueueServiceServerMockRecorder struct {
	mock *MockUnsafeDistributedQueueServiceServer
}

// NewMockUnsafeDistributedQueueServiceServer creates a new mock instance.
func NewMockUnsafeDistributedQueueServiceServer(ctrl *gomock.Controller) *MockUnsafeDistributedQueueServiceServer {
	mock := &MockUnsafeDistributedQueueServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDistributedQueueServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDistributedQueueServiceServer) EXPECT() *MockUnsafeDistributedQueueServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDistributedQueueServiceServer mocks base method.
func (m *MockUnsafeDistributedQueueServiceServer) mustEmbedUnimplementedDistributedQueueServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedQueueServiceServer")
}

// mustEmbedUnimplementedDistributedQueueServiceServer indicates an expected call of mustEmbedUnimplementedDistributedQueueServiceServer.
func (mr *MockUnsafeDistributedQueueServiceServerMockRecorder) mustEmbedUnimplementedDistributedQueueServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedQueueServiceServer", reflect.TypeOf((*MockUnsafeDistributedQueueServiceServer)(nil).mustEmbedUnimplementedDistributedQueueServiceServer))
}

// MockDistributedQueueService_ConnectServer is a mock of DistributedQueueService_ConnectServer interface.
type MockDistributedQueueService_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueService_ConnectServerMockRecorder
}

// MockDistributedQueueService_ConnectServerMockRecorder is the mock recorder for MockDistributedQueueService_ConnectServer.
type MockDistributedQueueService_ConnectServerMockRecorder struct {
	mock *MockDistributedQueueService_ConnectServer
}

// NewMockDistributedQueueService_ConnectServer creates a new mock instance.
func NewMockDistributedQueueService_ConnectServer(ctrl *gomock.Controller) *MockDistributedQueueService_ConnectServer {
	mock := &MockDistributedQueueService_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueService_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueService_ConnectServer) EXPECT() *MockDistributedQueueService_ConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDistributedQueueService_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockDistributedQueueService_ConnectServer) Recv() (*distqueue.QueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*distqueue.QueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDistributedQueueService_ConnectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDistributedQueueService_ConnectServer) Send(arg0 *distqueue.ServerQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDistributedQueueService_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDistributedQueueService_ConnectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDistributedQueueService_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDistributedQueueService_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDistributedQueueService_ConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDistributedQueueService_ConnectServer)(nil).SetTrailer), arg0)
}

// MockDistributedQueueService_GetRangeServer is a mock of DistributedQueueService_GetRangeServer interface.
type MockDistributedQueueService_GetRangeServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueService_GetRangeServerMockRecorder
}

// MockDistributedQueueService_GetRangeServerMockRecorder is the mock recorder for MockDistributedQueueService_GetRangeServer.
type MockDistributedQueueService_GetRangeServerMockRecorder struct {
	mock *MockDistributedQueueService_GetRangeServer
}

// NewMockDistributedQueueService_GetRangeServer creates a new mock instance.
func NewMockDistributedQueueService_GetRangeServer(ctrl *gomock.Controller) *MockDistributedQueueService_GetRangeServer {
	mock := &MockDistributedQueueService_GetRangeServer{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueService_GetRangeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueService_GetRangeServer) EXPECT() *MockDistributedQueueService_GetRangeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDistributedQueueService_GetRangeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDistributedQueueService_GetRangeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDistributedQueueService_GetRangeServer) Send(arg0 *distqueue.ServerQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDistributedQueueService_GetRangeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDistributedQueueService_GetRangeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDistributedQueueService_GetRangeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDistributedQueueService_GetRangeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDistributedQueueService_GetRangeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDistributedQueueService_GetRangeServer)(nil).SetTrailer), arg0)
}
