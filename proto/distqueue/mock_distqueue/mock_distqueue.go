// Code generated by MockGen. DO NOT EDIT.
// Source: proto/distqueue/distqueue_grpc.pb.go

// Package mock_distqueue is a generated GoMock package.
package mock_distqueue

import (
	context "context"
	reflect "reflect"

	distqueue "github.com/Cameron-Kurotori/microservices-coding-challenge/proto/distqueue"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDistributedQueueServiceClient is a mock of DistributedQueueServiceClient interface.
type MockDistributedQueueServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueServiceClientMockRecorder
}

// MockDistributedQueueServiceClientMockRecorder is the mock recorder for MockDistributedQueueServiceClient.
type MockDistributedQueueServiceClientMockRecorder struct {
	mock *MockDistributedQueueServiceClient
}

// NewMockDistributedQueueServiceClient creates a new mock instance.
func NewMockDistributedQueueServiceClient(ctrl *gomock.Controller) *MockDistributedQueueServiceClient {
	mock := &MockDistributedQueueServiceClient{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueServiceClient) EXPECT() *MockDistributedQueueServiceClientMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockDistributedQueueServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (distqueue.DistributedQueueService_SyncClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(distqueue.DistributedQueueService_SyncClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockDistributedQueueServiceClientMockRecorder) Sync(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDistributedQueueServiceClient)(nil).Sync), varargs...)
}

// MockDistributedQueueService_SyncClient is a mock of DistributedQueueService_SyncClient interface.
type MockDistributedQueueService_SyncClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueService_SyncClientMockRecorder
}

// MockDistributedQueueService_SyncClientMockRecorder is the mock recorder for MockDistributedQueueService_SyncClient.
type MockDistributedQueueService_SyncClientMockRecorder struct {
	mock *MockDistributedQueueService_SyncClient
}

// NewMockDistributedQueueService_SyncClient creates a new mock instance.
func NewMockDistributedQueueService_SyncClient(ctrl *gomock.Controller) *MockDistributedQueueService_SyncClient {
	mock := &MockDistributedQueueService_SyncClient{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueService_SyncClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueService_SyncClient) EXPECT() *MockDistributedQueueService_SyncClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDistributedQueueService_SyncClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDistributedQueueService_SyncClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDistributedQueueService_SyncClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDistributedQueueService_SyncClient) Recv() (*distqueue.ServerQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*distqueue.ServerQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDistributedQueueService_SyncClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDistributedQueueService_SyncClient) Send(arg0 *distqueue.QueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDistributedQueueService_SyncClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDistributedQueueService_SyncClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDistributedQueueService_SyncClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDistributedQueueService_SyncClient)(nil).Trailer))
}

// MockDistributedQueueServiceServer is a mock of DistributedQueueServiceServer interface.
type MockDistributedQueueServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueServiceServerMockRecorder
}

// MockDistributedQueueServiceServerMockRecorder is the mock recorder for MockDistributedQueueServiceServer.
type MockDistributedQueueServiceServerMockRecorder struct {
	mock *MockDistributedQueueServiceServer
}

// NewMockDistributedQueueServiceServer creates a new mock instance.
func NewMockDistributedQueueServiceServer(ctrl *gomock.Controller) *MockDistributedQueueServiceServer {
	mock := &MockDistributedQueueServiceServer{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueServiceServer) EXPECT() *MockDistributedQueueServiceServerMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockDistributedQueueServiceServer) Sync(arg0 distqueue.DistributedQueueService_SyncServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockDistributedQueueServiceServerMockRecorder) Sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDistributedQueueServiceServer)(nil).Sync), arg0)
}

// mustEmbedUnimplementedDistributedQueueServiceServer mocks base method.
func (m *MockDistributedQueueServiceServer) mustEmbedUnimplementedDistributedQueueServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedQueueServiceServer")
}

// mustEmbedUnimplementedDistributedQueueServiceServer indicates an expected call of mustEmbedUnimplementedDistributedQueueServiceServer.
func (mr *MockDistributedQueueServiceServerMockRecorder) mustEmbedUnimplementedDistributedQueueServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedQueueServiceServer", reflect.TypeOf((*MockDistributedQueueServiceServer)(nil).mustEmbedUnimplementedDistributedQueueServiceServer))
}

// MockUnsafeDistributedQueueServiceServer is a mock of UnsafeDistributedQueueServiceServer interface.
type MockUnsafeDistributedQueueServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDistributedQueueServiceServerMockRecorder
}

// MockUnsafeDistributedQueueServiceServerMockRecorder is the mock recorder for MockUnsafeDistributedQueueServiceServer.
type MockUnsafeDistributedQueueServiceServerMockRecorder struct {
	mock *MockUnsafeDistributedQueueServiceServer
}

// NewMockUnsafeDistributedQueueServiceServer creates a new mock instance.
func NewMockUnsafeDistributedQueueServiceServer(ctrl *gomock.Controller) *MockUnsafeDistributedQueueServiceServer {
	mock := &MockUnsafeDistributedQueueServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDistributedQueueServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDistributedQueueServiceServer) EXPECT() *MockUnsafeDistributedQueueServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDistributedQueueServiceServer mocks base method.
func (m *MockUnsafeDistributedQueueServiceServer) mustEmbedUnimplementedDistributedQueueServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedQueueServiceServer")
}

// mustEmbedUnimplementedDistributedQueueServiceServer indicates an expected call of mustEmbedUnimplementedDistributedQueueServiceServer.
func (mr *MockUnsafeDistributedQueueServiceServerMockRecorder) mustEmbedUnimplementedDistributedQueueServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedQueueServiceServer", reflect.TypeOf((*MockUnsafeDistributedQueueServiceServer)(nil).mustEmbedUnimplementedDistributedQueueServiceServer))
}

// MockDistributedQueueService_SyncServer is a mock of DistributedQueueService_SyncServer interface.
type MockDistributedQueueService_SyncServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedQueueService_SyncServerMockRecorder
}

// MockDistributedQueueService_SyncServerMockRecorder is the mock recorder for MockDistributedQueueService_SyncServer.
type MockDistributedQueueService_SyncServerMockRecorder struct {
	mock *MockDistributedQueueService_SyncServer
}

// NewMockDistributedQueueService_SyncServer creates a new mock instance.
func NewMockDistributedQueueService_SyncServer(ctrl *gomock.Controller) *MockDistributedQueueService_SyncServer {
	mock := &MockDistributedQueueService_SyncServer{ctrl: ctrl}
	mock.recorder = &MockDistributedQueueService_SyncServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedQueueService_SyncServer) EXPECT() *MockDistributedQueueService_SyncServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDistributedQueueService_SyncServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockDistributedQueueService_SyncServer) Recv() (*distqueue.QueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*distqueue.QueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDistributedQueueService_SyncServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDistributedQueueService_SyncServer) Send(arg0 *distqueue.ServerQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDistributedQueueService_SyncServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDistributedQueueService_SyncServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDistributedQueueService_SyncServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDistributedQueueService_SyncServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDistributedQueueService_SyncServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDistributedQueueService_SyncServer)(nil).SetTrailer), arg0)
}
