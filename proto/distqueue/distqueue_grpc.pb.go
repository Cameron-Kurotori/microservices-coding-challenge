// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distqueue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedQueueServiceClient is the client API for DistributedQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedQueueServiceClient interface {
	// Sync initializes a connection between the workers and leader. Workers stream items
	// to the leader and the leader will determine the order of the items
	// and send it to all connected workers.
	Sync(ctx context.Context, opts ...grpc.CallOption) (DistributedQueueService_SyncClient, error)
}

type distributedQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedQueueServiceClient(cc grpc.ClientConnInterface) DistributedQueueServiceClient {
	return &distributedQueueServiceClient{cc}
}

func (c *distributedQueueServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (DistributedQueueService_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributedQueueService_ServiceDesc.Streams[0], "/distqueue.DistributedQueueService/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributedQueueServiceSyncClient{stream}
	return x, nil
}

type DistributedQueueService_SyncClient interface {
	Send(*QueueItem) error
	Recv() (*ServerQueueItem, error)
	grpc.ClientStream
}

type distributedQueueServiceSyncClient struct {
	grpc.ClientStream
}

func (x *distributedQueueServiceSyncClient) Send(m *QueueItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *distributedQueueServiceSyncClient) Recv() (*ServerQueueItem, error) {
	m := new(ServerQueueItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributedQueueServiceServer is the server API for DistributedQueueService service.
// All implementations must embed UnimplementedDistributedQueueServiceServer
// for forward compatibility
type DistributedQueueServiceServer interface {
	// Sync initializes a connection between the workers and leader. Workers stream items
	// to the leader and the leader will determine the order of the items
	// and send it to all connected workers.
	Sync(DistributedQueueService_SyncServer) error
	mustEmbedUnimplementedDistributedQueueServiceServer()
}

// UnimplementedDistributedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedQueueServiceServer struct {
}

func (UnimplementedDistributedQueueServiceServer) Sync(DistributedQueueService_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedDistributedQueueServiceServer) mustEmbedUnimplementedDistributedQueueServiceServer() {
}

// UnsafeDistributedQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedQueueServiceServer will
// result in compilation errors.
type UnsafeDistributedQueueServiceServer interface {
	mustEmbedUnimplementedDistributedQueueServiceServer()
}

func RegisterDistributedQueueServiceServer(s grpc.ServiceRegistrar, srv DistributedQueueServiceServer) {
	s.RegisterService(&DistributedQueueService_ServiceDesc, srv)
}

func _DistributedQueueService_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DistributedQueueServiceServer).Sync(&distributedQueueServiceSyncServer{stream})
}

type DistributedQueueService_SyncServer interface {
	Send(*ServerQueueItem) error
	Recv() (*QueueItem, error)
	grpc.ServerStream
}

type distributedQueueServiceSyncServer struct {
	grpc.ServerStream
}

func (x *distributedQueueServiceSyncServer) Send(m *ServerQueueItem) error {
	return x.ServerStream.SendMsg(m)
}

func (x *distributedQueueServiceSyncServer) Recv() (*QueueItem, error) {
	m := new(QueueItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributedQueueService_ServiceDesc is the grpc.ServiceDesc for DistributedQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distqueue.DistributedQueueService",
	HandlerType: (*DistributedQueueServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _DistributedQueueService_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distqueue.proto",
}
